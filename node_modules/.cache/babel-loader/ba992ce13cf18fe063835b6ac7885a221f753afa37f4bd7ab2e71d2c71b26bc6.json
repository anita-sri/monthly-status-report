{"ast":null,"code":"import { resolveOwnerFields } from '../utils/resolveOwnerFields.mjs';\nimport { __authMode, __authToken, __headers } from '../types/index.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst connectionType = {\n  HAS_ONE: 'HAS_ONE',\n  HAS_MANY: 'HAS_MANY',\n  BELONGS_TO: 'BELONGS_TO'\n};\n/**\n *\n * @param GraphQL response object\n * @returns response object with `items` properties flattened\n */\nconst flattenItems = obj => {\n  const res = {};\n  Object.entries(obj).forEach(([prop, value]) => {\n    if (typeof value === 'object' && !Array.isArray(value) && value !== null) {\n      if (value.items !== undefined) {\n        res[prop] = value.items.map(item => flattenItems(item));\n        return;\n      }\n      res[prop] = flattenItems(value);\n      return;\n    }\n    res[prop] = value;\n  });\n  return res;\n};\n// TODO: this should accept single result to support CRUD methods; create helper for array/list\nfunction initializeModel(client, modelName, result, modelIntrospection, authMode, authToken, context = false) {\n  const introModel = modelIntrospection.models[modelName];\n  const introModelFields = introModel.fields;\n  const modelFields = Object.entries(introModelFields).filter(([_, field]) => field?.type?.model !== undefined).map(([fieldName]) => fieldName);\n  return result.map(record => {\n    const initializedRelationalFields = {};\n    for (const fieldName of modelFields) {\n      const modelField = introModelFields[fieldName];\n      const modelFieldType = modelField?.type;\n      const relatedModelName = modelFieldType.model;\n      const relatedModel = modelIntrospection.models[relatedModelName];\n      const relatedModelPKFieldName = relatedModel.primaryKeyInfo.primaryKeyFieldName;\n      const relatedModelSKFieldNames = relatedModel.primaryKeyInfo.sortKeyFieldNames;\n      const relationType = modelField.association?.connectionType;\n      let connectionFields = [];\n      if (modelField.association && 'associatedWith' in modelField.association) {\n        connectionFields = modelField.association.associatedWith;\n      }\n      let targetNames = [];\n      if (modelField.association && 'targetNames' in modelField.association) {\n        targetNames = modelField.association.targetNames;\n      }\n      switch (relationType) {\n        case connectionType.HAS_ONE:\n        case connectionType.BELONGS_TO:\n          const sortKeyValues = relatedModelSKFieldNames.reduce((acc, curVal) => {\n            if (record[curVal]) {\n              return acc[curVal] = record[curVal];\n            }\n          }, {});\n          if (context) {\n            initializedRelationalFields[fieldName] = (contextSpec, options) => {\n              if (record[targetNames[0]]) {\n                return client.models[relatedModelName].get(contextSpec, {\n                  [relatedModelPKFieldName]: record[targetNames[0]],\n                  ...sortKeyValues\n                }, {\n                  authMode: options?.authMode || authMode,\n                  authToken: options?.authToken || authToken\n                });\n              }\n              return undefined;\n            };\n          } else {\n            initializedRelationalFields[fieldName] = options => {\n              if (record[targetNames[0]]) {\n                return client.models[relatedModelName].get({\n                  [relatedModelPKFieldName]: record[targetNames[0]],\n                  ...sortKeyValues\n                }, {\n                  authMode: options?.authMode || authMode,\n                  authToken: options?.authToken || authToken\n                });\n              }\n              return undefined;\n            };\n          }\n          break;\n        case connectionType.HAS_MANY:\n          const parentPk = introModel.primaryKeyInfo.primaryKeyFieldName;\n          const parentSK = introModel.primaryKeyInfo.sortKeyFieldNames;\n          // M:N check - TODO: refactor\n          const relatedModelField = relatedModel.fields[connectionFields[0]];\n          const relatedModelFieldType = relatedModelField.type;\n          if (relatedModelFieldType.model) {\n            let relatedTargetNames = [];\n            if (relatedModelField.association && 'targetNames' in relatedModelField.association) {\n              relatedTargetNames = relatedModelField.association?.targetNames;\n            }\n            const hasManyFilter = relatedTargetNames.map((field, idx) => {\n              if (idx === 0) {\n                return {\n                  [field]: {\n                    eq: record[parentPk]\n                  }\n                };\n              }\n              return {\n                [field]: {\n                  eq: record[parentSK[idx - 1]]\n                }\n              };\n            });\n            if (context) {\n              initializedRelationalFields[fieldName] = (contextSpec, options) => {\n                if (record[parentPk]) {\n                  return client.models[relatedModelName].list(contextSpec, {\n                    filter: {\n                      and: hasManyFilter\n                    },\n                    limit: options?.limit,\n                    nextToken: options?.nextToken,\n                    authMode: options?.authMode || authMode,\n                    authToken: options?.authToken || authToken\n                  });\n                }\n                return [];\n              };\n            } else {\n              initializedRelationalFields[fieldName] = options => {\n                if (record[parentPk]) {\n                  return client.models[relatedModelName].list({\n                    filter: {\n                      and: hasManyFilter\n                    },\n                    limit: options?.limit,\n                    nextToken: options?.nextToken,\n                    authMode: options?.authMode || authMode,\n                    authToken: options?.authToken || authToken\n                  });\n                }\n                return [];\n              };\n            }\n            break;\n          }\n          const hasManyFilter = connectionFields.map((field, idx) => {\n            if (idx === 0) {\n              return {\n                [field]: {\n                  eq: record[parentPk]\n                }\n              };\n            }\n            return {\n              [field]: {\n                eq: record[parentSK[idx - 1]]\n              }\n            };\n          });\n          if (context) {\n            initializedRelationalFields[fieldName] = (contextSpec, options) => {\n              if (record[parentPk]) {\n                return client.models[relatedModelName].list(contextSpec, {\n                  filter: {\n                    and: hasManyFilter\n                  },\n                  limit: options?.limit,\n                  nextToken: options?.nextToken,\n                  authMode: options?.authMode || authMode,\n                  authToken: options?.authToken || authToken\n                });\n              }\n              return [];\n            };\n          } else {\n            initializedRelationalFields[fieldName] = options => {\n              if (record[parentPk]) {\n                return client.models[relatedModelName].list({\n                  filter: {\n                    and: hasManyFilter\n                  },\n                  limit: options?.limit,\n                  nextToken: options?.nextToken,\n                  authMode: options?.authMode || authMode,\n                  authToken: options?.authToken || authToken\n                });\n              }\n              return [];\n            };\n          }\n          break;\n      }\n    }\n    return {\n      ...record,\n      ...initializedRelationalFields\n    };\n  });\n}\nconst graphQLOperationsInfo = {\n  CREATE: {\n    operationPrefix: 'create',\n    usePlural: false\n  },\n  READ: {\n    operationPrefix: 'get',\n    usePlural: false\n  },\n  UPDATE: {\n    operationPrefix: 'update',\n    usePlural: false\n  },\n  DELETE: {\n    operationPrefix: 'delete',\n    usePlural: false\n  },\n  LIST: {\n    operationPrefix: 'list',\n    usePlural: true\n  },\n  INDEX_QUERY: {\n    operationPrefix: '',\n    usePlural: false\n  },\n  ONCREATE: {\n    operationPrefix: 'onCreate',\n    usePlural: false\n  },\n  ONUPDATE: {\n    operationPrefix: 'onUpdate',\n    usePlural: false\n  },\n  ONDELETE: {\n    operationPrefix: 'onDelete',\n    usePlural: false\n  },\n  OBSERVE_QUERY: {\n    operationPrefix: 'observeQuery',\n    usePlural: false\n  }\n};\nconst SELECTION_SET_WILDCARD = '*';\nfunction defaultSelectionSetForNonModel(nonModelDefinition) {\n  // fields that are explicitly part of the graphql schema;\n  const {\n    fields\n  } = nonModelDefinition;\n  const explicitFields = Object.values(fields)\n  // Default selection set omits non-model fields\n  .map(({\n    type,\n    name\n  }) => (typeof type === 'string' || typeof type === 'object' && typeof type?.enum === 'string') && name).filter(Boolean);\n  // fields used for owner auth rules that may or may not also\n  // be explicit on the model.\n  return Array.from(new Set(explicitFields));\n}\nfunction defaultSelectionSetForModel(modelDefinition) {\n  // fields that are explicitly part of the graphql schema; not\n  // inferred from owner auth rules.\n  const {\n    fields\n  } = modelDefinition;\n  const explicitFields = Object.values(fields)\n  // Default selection set omits model fields\n  .map(({\n    type,\n    name\n  }) => {\n    if (typeof type === 'string') return name;\n    if (typeof type === 'object') {\n      if (typeof type?.enum === 'string') {\n        return name;\n      } else if (typeof type?.nonModel === 'string') {\n        return `${name}.${SELECTION_SET_WILDCARD}`;\n      }\n    }\n  }).filter(Boolean);\n  // fields used for owner auth rules that may or may not also\n  // be explicit on the model.\n  const ownerFields = resolveOwnerFields(modelDefinition);\n  return Array.from(new Set(explicitFields.concat(ownerFields)));\n}\nconst FIELD_IR = '';\n/**\n * Generates nested Custom Selection Set IR from path\n *\n * @param modelDefinitions\n * @param modelName\n * @param selectionSet - array of object paths\n * @example\n * ### Given\n * `selectionSet = ['id', 'comments.post.id']`\n * ### Returns\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n */\nfunction customSelectionSetToIR(modelInstrospection, modelName, selectionSet) {\n  const dotNotationToObject = (path, modelOrNonModelName) => {\n    const [fieldName, ...rest] = path.split('.');\n    const nested = rest[0];\n    const modelDefinition = modelInstrospection.models[modelOrNonModelName];\n    const modelFields = modelDefinition?.fields;\n    const relatedModel = modelFields?.[fieldName]?.type?.model;\n    const relatedModelDefinition = modelInstrospection.models[relatedModel];\n    const relatedNonModel = modelFields?.[fieldName]?.type?.nonModel;\n    const relatedNonModelDefinition = modelInstrospection.nonModels[relatedNonModel];\n    const isModelOrNonModelOrField = relatedModelDefinition ? 'model' : relatedNonModelDefinition ? 'nonModel' : 'field';\n    if (isModelOrNonModelOrField === 'nonModel') {\n      let result = {};\n      if (!nested) {\n        throw Error(`${fieldName} must declare a wildcard (*) or a field of custom type ${relatedNonModel}`);\n      }\n      if (nested === SELECTION_SET_WILDCARD) {\n        result = {\n          [fieldName]: nonModelsDefaultSelectionSetIR(relatedNonModelDefinition)\n        };\n      } else {\n        result = {\n          [fieldName]: dotNotationToObject(rest.join('.'), relatedNonModel)\n        };\n      }\n      return result;\n    } else if (isModelOrNonModelOrField === 'model') {\n      let result = {};\n      if (!nested) {\n        throw Error(`${fieldName} must declare a wildcard (*) or a field of model ${relatedModel}`);\n      }\n      if (nested === SELECTION_SET_WILDCARD) {\n        const relatedModelDefinition = modelInstrospection.models[relatedModel];\n        result = {\n          [fieldName]: modelsDefaultSelectionSetIR(relatedModelDefinition)\n        };\n      } else {\n        result = {\n          [fieldName]: dotNotationToObject(rest.join('.'), relatedModel)\n        };\n      }\n      if (modelFields[fieldName]?.isArray) {\n        result = {\n          [fieldName]: {\n            items: result[fieldName]\n          }\n        };\n      }\n      return result;\n    } else {\n      const modelField = modelFields?.[fieldName];\n      const nonModelDefinition = modelInstrospection.nonModels[modelOrNonModelName];\n      const nonModelField = nonModelDefinition?.fields?.[fieldName];\n      if (!nonModelDefinition) {\n        const isOwnerField = resolveOwnerFields(modelDefinition).includes(fieldName);\n        if (!modelField && !isOwnerField) {\n          throw Error(`${fieldName} is not a field of model ${modelOrNonModelName}`);\n        }\n      } else {\n        if (!nonModelField) {\n          throw Error(`${fieldName} is not a field of custom type ${modelOrNonModelName}`);\n        }\n      }\n      return {\n        [fieldName]: FIELD_IR\n      };\n    }\n  };\n  return selectionSet.reduce((resultObj, path) => deepMergeSelectionSetObjects(dotNotationToObject(path, modelName), resultObj), {});\n}\nconst modelsDefaultSelectionSetIR = relatedModelDefinition => {\n  const defaultSelectionSet = defaultSelectionSetForModel(relatedModelDefinition);\n  const reduced = defaultSelectionSet.reduce((acc, curVal) => {\n    acc[curVal] = FIELD_IR;\n    return acc;\n  }, {});\n  return reduced;\n};\nconst nonModelsDefaultSelectionSetIR = relatedNonModelDefinition => {\n  const defaultSelectionSet = defaultSelectionSetForNonModel(relatedNonModelDefinition);\n  const reduced = defaultSelectionSet.reduce((acc, curVal) => {\n    acc[curVal] = FIELD_IR;\n    return acc;\n  }, {});\n  return reduced;\n};\n/**\n * Stringifies selection set IR\n * * @example\n * ### Given\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n * ### Returns\n * `'id comments { items { post { id } } }'`\n */\nfunction selectionSetIRToString(obj) {\n  const res = [];\n  Object.entries(obj).forEach(([fieldName, value]) => {\n    if (value === FIELD_IR) {\n      res.push(fieldName);\n    } else if (typeof value === 'object' && value !== null) {\n      if (value?.items) {\n        res.push(fieldName, '{', 'items', '{', selectionSetIRToString(value.items), '}', '}');\n      } else {\n        res.push(fieldName, '{', selectionSetIRToString(value), '}');\n      }\n    }\n  });\n  return res.join(' ');\n}\n/**\n * Recursively merges selection set objects from `source` onto `target`.\n *\n * `target` will be updated. `source` will be left alone.\n *\n * @param source The object to merge into target.\n * @param target The object to be mutated.\n */\nfunction deepMergeSelectionSetObjects(source, target) {\n  const isObject = obj => obj && typeof obj === 'object';\n  for (const key in source) {\n    // This verification avoids 'Prototype Pollution' issue\n    if (!source.hasOwnProperty(key)) continue;\n    if (target.hasOwnProperty(key) && isObject(target[key])) {\n      deepMergeSelectionSetObjects(source[key], target[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction generateSelectionSet(modelInstrospection, modelName, selectionSet) {\n  const modelDefinition = modelInstrospection.models[modelName];\n  const selSetIr = customSelectionSetToIR(modelInstrospection, modelName, selectionSet ?? defaultSelectionSetForModel(modelDefinition));\n  const selSetString = selectionSetIRToString(selSetIr);\n  return selSetString;\n}\nfunction generateGraphQLDocument(modelInstrospection, modelName, modelOperation, listArgs, indexMeta) {\n  const modelDefinition = modelInstrospection.models[modelName];\n  const {\n    name,\n    pluralName,\n    fields,\n    primaryKeyInfo: {\n      isCustomPrimaryKey,\n      primaryKeyFieldName,\n      sortKeyFieldNames\n    }\n  } = modelDefinition;\n  const {\n    operationPrefix,\n    usePlural\n  } = graphQLOperationsInfo[modelOperation];\n  const {\n    selectionSet\n  } = listArgs || {};\n  let graphQLFieldName;\n  let indexQueryArgs;\n  if (operationPrefix) {\n    graphQLFieldName = `${operationPrefix}${usePlural ? pluralName : name}`;\n  } else if (indexMeta) {\n    const {\n      queryField,\n      pk,\n      sk = []\n    } = indexMeta;\n    graphQLFieldName = queryField;\n    const skQueryArgs = sk.reduce((acc, fieldName) => {\n      const fieldType = fields[fieldName].type;\n      acc[fieldName] = `Model${fieldType}KeyConditionInput`;\n      return acc;\n    }, {});\n    indexQueryArgs = {\n      [pk]: `${fields[pk].type}!`,\n      ...skQueryArgs\n    };\n  } else {\n    throw new Error('Error generating GraphQL Document - invalid operation name');\n  }\n  let graphQLOperationType;\n  let graphQLSelectionSet;\n  let graphQLArguments;\n  const selectionSetFields = generateSelectionSet(modelInstrospection, modelName, selectionSet);\n  switch (modelOperation) {\n    case 'CREATE':\n    case 'UPDATE':\n    case 'DELETE':\n      graphQLArguments ?? (graphQLArguments = {\n        input: `${operationPrefix.charAt(0).toLocaleUpperCase() + operationPrefix.slice(1)}${name}Input!`\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'mutation');\n    case 'READ':\n      graphQLArguments ?? (graphQLArguments = isCustomPrimaryKey ? [primaryKeyFieldName, ...sortKeyFieldNames].reduce((acc, fieldName) => {\n        acc[fieldName] = `${fields[fieldName].type}!`;\n        return acc;\n      }, {}) : {\n        [primaryKeyFieldName]: `${fields[primaryKeyFieldName].type}!`\n      });\n      graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n    case 'LIST':\n      graphQLArguments ?? (graphQLArguments = {\n        filter: `Model${name}FilterInput`,\n        limit: 'Int',\n        nextToken: 'String'\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'query');\n      graphQLSelectionSet ?? (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n    case 'INDEX_QUERY':\n      graphQLArguments ?? (graphQLArguments = {\n        ...indexQueryArgs,\n        filter: `Model${name}FilterInput`,\n        limit: 'Int',\n        nextToken: 'String'\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'query');\n      graphQLSelectionSet ?? (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n    case 'ONCREATE':\n    case 'ONUPDATE':\n    case 'ONDELETE':\n      graphQLArguments ?? (graphQLArguments = {\n        filter: `ModelSubscription${name}FilterInput`\n      });\n      graphQLOperationType ?? (graphQLOperationType = 'subscription');\n      graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n      break;\n    case 'OBSERVE_QUERY':\n    default:\n      throw new Error('Internal error: Attempted to generate graphql document for observeQuery. Please report this error.');\n  }\n  const graphQLDocument = `${graphQLOperationType}${graphQLArguments ? `(${Object.entries(graphQLArguments).map(([fieldName, type]) => `\\$${fieldName}: ${type}`)})` : ''} { ${graphQLFieldName}${graphQLArguments ? `(${Object.keys(graphQLArguments).map(fieldName => `${fieldName}: \\$${fieldName}`)})` : ''} { ${graphQLSelectionSet} } }`;\n  return graphQLDocument;\n}\nfunction buildGraphQLVariables(modelDefinition, operation, arg, modelIntrospection, indexMeta) {\n  const {\n    fields,\n    primaryKeyInfo: {\n      isCustomPrimaryKey,\n      primaryKeyFieldName,\n      sortKeyFieldNames\n    }\n  } = modelDefinition;\n  let variables = {};\n  // TODO: process input\n  switch (operation) {\n    case 'CREATE':\n      variables = {\n        input: arg ? normalizeMutationInput(arg, modelDefinition, modelIntrospection) : {}\n      };\n      break;\n    case 'UPDATE':\n      // readonly fields are not  updated\n      variables = {\n        input: arg ? Object.fromEntries(Object.entries(normalizeMutationInput(arg, modelDefinition, modelIntrospection)).filter(([fieldName]) => {\n          const {\n            isReadOnly\n          } = fields[fieldName];\n          return !isReadOnly;\n        })) : {}\n      };\n      break;\n    case 'READ':\n    case 'DELETE':\n      // only identifiers are sent\n      if (arg) {\n        variables = isCustomPrimaryKey ? [primaryKeyFieldName, ...sortKeyFieldNames].reduce((acc, fieldName) => {\n          acc[fieldName] = arg[fieldName];\n          return acc;\n        }, {}) : {\n          [primaryKeyFieldName]: arg[primaryKeyFieldName]\n        };\n      }\n      if (operation === 'DELETE') {\n        variables = {\n          input: variables\n        };\n      }\n      break;\n    case 'LIST':\n      if (arg?.filter) {\n        variables.filter = arg.filter;\n      }\n      if (arg?.nextToken) {\n        variables.nextToken = arg.nextToken;\n      }\n      if (arg?.limit) {\n        variables.limit = arg.limit;\n      }\n      break;\n    case 'INDEX_QUERY':\n      const {\n        pk,\n        sk = []\n      } = indexMeta;\n      variables[pk] = arg[pk];\n      for (const skField of sk) {\n        variables[skField] = arg[skField];\n      }\n      if (arg?.filter) {\n        variables.filter = arg.filter;\n      }\n      if (arg?.nextToken) {\n        variables.nextToken = arg.nextToken;\n      }\n      if (arg?.limit) {\n        variables.limit = arg.limit;\n      }\n      break;\n    case 'ONCREATE':\n    case 'ONUPDATE':\n    case 'ONDELETE':\n      if (arg?.filter) {\n        variables = {\n          filter: arg.filter\n        };\n      }\n      break;\n    case 'OBSERVE_QUERY':\n      throw new Error('Internal error: Attempted to build variables for observeQuery. Please report this error.');\n    default:\n      const exhaustiveCheck = operation;\n      throw new Error(`Unhandled operation case: ${exhaustiveCheck}`);\n  }\n  return variables;\n}\n/**\n * Iterates over mutation input values and resolves any model inputs to their corresponding join fields/values\n *\n * @example\n * ### Usage\n * ```ts\n * const result = normalizeMutationInput({ post: post }, model, modelDefinition);\n * ```\n * ### Result\n * ```ts\n * { postId: \"abc123\" }\n * ```\n *\n */\nfunction normalizeMutationInput(mutationInput, model, modelIntrospection) {\n  const {\n    fields\n  } = model;\n  const normalized = {};\n  Object.entries(mutationInput).forEach(([inputFieldName, inputValue]) => {\n    const fieldType = fields[inputFieldName]?.type;\n    const relatedModelName = fieldType?.model;\n    if (relatedModelName) {\n      const association = fields[inputFieldName]?.association;\n      const relatedModelDef = modelIntrospection.models[relatedModelName];\n      const relatedModelPkInfo = relatedModelDef.primaryKeyInfo;\n      if (association?.connectionType === connectionType.HAS_ONE) {\n        const associationHasOne = association;\n        associationHasOne.targetNames.forEach((targetName, idx) => {\n          const associatedFieldName = associationHasOne.associatedWith[idx];\n          normalized[targetName] = inputValue[associatedFieldName];\n        });\n      }\n      if (association?.connectionType === connectionType.BELONGS_TO) {\n        const associationBelongsTo = association;\n        associationBelongsTo.targetNames.forEach((targetName, idx) => {\n          if (idx === 0) {\n            const associatedFieldName = relatedModelPkInfo.primaryKeyFieldName;\n            normalized[targetName] = inputValue[associatedFieldName];\n          } else {\n            const associatedFieldName = relatedModelPkInfo.sortKeyFieldNames[idx - 1];\n            normalized[targetName] = inputValue[associatedFieldName];\n          }\n        });\n      }\n    } else {\n      normalized[inputFieldName] = inputValue;\n    }\n  });\n  return normalized;\n}\n/**\n * Produces a parameter object that can contains auth mode/token overrides\n * only if present in either `options` (first) or configured on the `client`\n * as a fallback.\n *\n * @param client Configured client from `generateClient`\n * @param options Args/Options obect from call site.\n * @returns\n */\nfunction authModeParams(client, options = {}) {\n  return {\n    authMode: options.authMode || client[__authMode],\n    authToken: options.authToken || client[__authToken]\n  };\n}\n/**\n * Retrieves custom headers from either the client or request options.\n * @param {client} V6Client | V6ClientSSRRequest | V6ClientSSRCookies - for extracting client headers\n * @param {requestHeaders} [CustomHeaders] - request headers\n * @returns {CustomHeaders} - custom headers\n */\nfunction getCustomHeaders(client, requestHeaders) {\n  let headers = client[__headers] || {};\n  // Individual request headers will take precedence over client headers.\n  // We intentionally do *not* merge client and request headers.\n  if (requestHeaders) {\n    headers = requestHeaders;\n  }\n  return headers;\n}\nexport { authModeParams, buildGraphQLVariables, customSelectionSetToIR, flattenItems, generateGraphQLDocument, generateSelectionSet, getCustomHeaders, graphQLOperationsInfo, initializeModel, normalizeMutationInput, selectionSetIRToString };","map":{"version":3,"names":["connectionType","HAS_ONE","HAS_MANY","BELONGS_TO","flattenItems","obj","res","Object","entries","forEach","prop","value","Array","isArray","items","undefined","map","item","initializeModel","client","modelName","result","modelIntrospection","authMode","authToken","context","introModel","models","introModelFields","fields","modelFields","filter","_","field","type","model","fieldName","record","initializedRelationalFields","modelField","modelFieldType","relatedModelName","relatedModel","relatedModelPKFieldName","primaryKeyInfo","primaryKeyFieldName","relatedModelSKFieldNames","sortKeyFieldNames","relationType","association","connectionFields","associatedWith","targetNames","sortKeyValues","reduce","acc","curVal","contextSpec","options","get","parentPk","parentSK","relatedModelField","relatedModelFieldType","relatedTargetNames","hasManyFilter","idx","eq","list","and","limit","nextToken","graphQLOperationsInfo","CREATE","operationPrefix","usePlural","READ","UPDATE","DELETE","LIST","INDEX_QUERY","ONCREATE","ONUPDATE","ONDELETE","OBSERVE_QUERY","SELECTION_SET_WILDCARD","defaultSelectionSetForNonModel","nonModelDefinition","explicitFields","values","name","enum","Boolean","from","Set","defaultSelectionSetForModel","modelDefinition","nonModel","ownerFields","resolveOwnerFields","concat","FIELD_IR","customSelectionSetToIR","modelInstrospection","selectionSet","dotNotationToObject","path","modelOrNonModelName","rest","split","nested","relatedModelDefinition","relatedNonModel","relatedNonModelDefinition","nonModels","isModelOrNonModelOrField","Error","nonModelsDefaultSelectionSetIR","join","modelsDefaultSelectionSetIR","nonModelField","isOwnerField","includes","resultObj","deepMergeSelectionSetObjects","defaultSelectionSet","reduced","selectionSetIRToString","push","source","target","isObject","key","hasOwnProperty","generateSelectionSet","selSetIr","selSetString","generateGraphQLDocument","modelOperation","listArgs","indexMeta","pluralName","isCustomPrimaryKey","graphQLFieldName","indexQueryArgs","queryField","pk","sk","skQueryArgs","fieldType","graphQLOperationType","graphQLSelectionSet","graphQLArguments","selectionSetFields","input","charAt","toLocaleUpperCase","slice","graphQLDocument","keys","buildGraphQLVariables","operation","arg","variables","normalizeMutationInput","fromEntries","isReadOnly","skField","exhaustiveCheck","mutationInput","normalized","inputFieldName","inputValue","relatedModelDef","relatedModelPkInfo","associationHasOne","targetName","associatedFieldName","associationBelongsTo","authModeParams","__authMode","__authToken","getCustomHeaders","requestHeaders","headers","__headers"],"sources":["/home/ec2-user/environment/monthly-status-report/node_modules/@aws-amplify/api-graphql/src/internals/APIClient.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { resolveOwnerFields } from '../utils/resolveOwnerFields';\nimport { __authMode, __authToken, __headers, } from '../types';\nconst connectionType = {\n    HAS_ONE: 'HAS_ONE',\n    HAS_MANY: 'HAS_MANY',\n    BELONGS_TO: 'BELONGS_TO',\n};\n/**\n *\n * @param GraphQL response object\n * @returns response object with `items` properties flattened\n */\nexport const flattenItems = (obj) => {\n    const res = {};\n    Object.entries(obj).forEach(([prop, value]) => {\n        if (typeof value === 'object' && !Array.isArray(value) && value !== null) {\n            if (value.items !== undefined) {\n                res[prop] = value.items.map((item) => flattenItems(item));\n                return;\n            }\n            res[prop] = flattenItems(value);\n            return;\n        }\n        res[prop] = value;\n    });\n    return res;\n};\n// TODO: this should accept single result to support CRUD methods; create helper for array/list\nexport function initializeModel(client, modelName, result, modelIntrospection, authMode, authToken, context = false) {\n    const introModel = modelIntrospection.models[modelName];\n    const introModelFields = introModel.fields;\n    const modelFields = Object.entries(introModelFields)\n        .filter(([_, field]) => field?.type?.model !== undefined)\n        .map(([fieldName]) => fieldName);\n    return result.map(record => {\n        const initializedRelationalFields = {};\n        for (const fieldName of modelFields) {\n            const modelField = introModelFields[fieldName];\n            const modelFieldType = modelField?.type;\n            const relatedModelName = modelFieldType.model;\n            const relatedModel = modelIntrospection.models[relatedModelName];\n            const relatedModelPKFieldName = relatedModel.primaryKeyInfo.primaryKeyFieldName;\n            const relatedModelSKFieldNames = relatedModel.primaryKeyInfo.sortKeyFieldNames;\n            const relationType = modelField.association?.connectionType;\n            let connectionFields = [];\n            if (modelField.association &&\n                'associatedWith' in modelField.association) {\n                connectionFields = modelField.association.associatedWith;\n            }\n            let targetNames = [];\n            if (modelField.association && 'targetNames' in modelField.association) {\n                targetNames = modelField.association.targetNames;\n            }\n            switch (relationType) {\n                case connectionType.HAS_ONE:\n                case connectionType.BELONGS_TO:\n                    const sortKeyValues = relatedModelSKFieldNames.reduce((acc, curVal) => {\n                        if (record[curVal]) {\n                            return (acc[curVal] = record[curVal]);\n                        }\n                    }, {});\n                    if (context) {\n                        initializedRelationalFields[fieldName] = (contextSpec, options) => {\n                            if (record[targetNames[0]]) {\n                                return client.models[relatedModelName].get(contextSpec, {\n                                    [relatedModelPKFieldName]: record[targetNames[0]],\n                                    ...sortKeyValues,\n                                }, {\n                                    authMode: options?.authMode || authMode,\n                                    authToken: options?.authToken || authToken,\n                                });\n                            }\n                            return undefined;\n                        };\n                    }\n                    else {\n                        initializedRelationalFields[fieldName] = (options) => {\n                            if (record[targetNames[0]]) {\n                                return client.models[relatedModelName].get({\n                                    [relatedModelPKFieldName]: record[targetNames[0]],\n                                    ...sortKeyValues,\n                                }, {\n                                    authMode: options?.authMode || authMode,\n                                    authToken: options?.authToken || authToken,\n                                });\n                            }\n                            return undefined;\n                        };\n                    }\n                    break;\n                case connectionType.HAS_MANY:\n                    const parentPk = introModel.primaryKeyInfo.primaryKeyFieldName;\n                    const parentSK = introModel.primaryKeyInfo.sortKeyFieldNames;\n                    // M:N check - TODO: refactor\n                    const relatedModelField = relatedModel.fields[connectionFields[0]];\n                    const relatedModelFieldType = relatedModelField.type;\n                    if (relatedModelFieldType.model) {\n                        let relatedTargetNames = [];\n                        if (relatedModelField.association &&\n                            'targetNames' in relatedModelField.association) {\n                            relatedTargetNames = relatedModelField.association?.targetNames;\n                        }\n                        const hasManyFilter = relatedTargetNames.map((field, idx) => {\n                            if (idx === 0) {\n                                return { [field]: { eq: record[parentPk] } };\n                            }\n                            return { [field]: { eq: record[parentSK[idx - 1]] } };\n                        });\n                        if (context) {\n                            initializedRelationalFields[fieldName] = (contextSpec, options) => {\n                                if (record[parentPk]) {\n                                    return client.models[relatedModelName].list(contextSpec, {\n                                        filter: { and: hasManyFilter },\n                                        limit: options?.limit,\n                                        nextToken: options?.nextToken,\n                                        authMode: options?.authMode || authMode,\n                                        authToken: options?.authToken || authToken,\n                                    });\n                                }\n                                return [];\n                            };\n                        }\n                        else {\n                            initializedRelationalFields[fieldName] = (options) => {\n                                if (record[parentPk]) {\n                                    return client.models[relatedModelName].list({\n                                        filter: { and: hasManyFilter },\n                                        limit: options?.limit,\n                                        nextToken: options?.nextToken,\n                                        authMode: options?.authMode || authMode,\n                                        authToken: options?.authToken || authToken,\n                                    });\n                                }\n                                return [];\n                            };\n                        }\n                        break;\n                    }\n                    const hasManyFilter = connectionFields.map((field, idx) => {\n                        if (idx === 0) {\n                            return { [field]: { eq: record[parentPk] } };\n                        }\n                        return { [field]: { eq: record[parentSK[idx - 1]] } };\n                    });\n                    if (context) {\n                        initializedRelationalFields[fieldName] = (contextSpec, options) => {\n                            if (record[parentPk]) {\n                                return client.models[relatedModelName].list(contextSpec, {\n                                    filter: { and: hasManyFilter },\n                                    limit: options?.limit,\n                                    nextToken: options?.nextToken,\n                                    authMode: options?.authMode || authMode,\n                                    authToken: options?.authToken || authToken,\n                                });\n                            }\n                            return [];\n                        };\n                    }\n                    else {\n                        initializedRelationalFields[fieldName] = (options) => {\n                            if (record[parentPk]) {\n                                return client.models[relatedModelName].list({\n                                    filter: { and: hasManyFilter },\n                                    limit: options?.limit,\n                                    nextToken: options?.nextToken,\n                                    authMode: options?.authMode || authMode,\n                                    authToken: options?.authToken || authToken,\n                                });\n                            }\n                            return [];\n                        };\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        return { ...record, ...initializedRelationalFields };\n    });\n}\nexport const graphQLOperationsInfo = {\n    CREATE: { operationPrefix: 'create', usePlural: false },\n    READ: { operationPrefix: 'get', usePlural: false },\n    UPDATE: { operationPrefix: 'update', usePlural: false },\n    DELETE: { operationPrefix: 'delete', usePlural: false },\n    LIST: { operationPrefix: 'list', usePlural: true },\n    INDEX_QUERY: { operationPrefix: '', usePlural: false },\n    ONCREATE: { operationPrefix: 'onCreate', usePlural: false },\n    ONUPDATE: { operationPrefix: 'onUpdate', usePlural: false },\n    ONDELETE: { operationPrefix: 'onDelete', usePlural: false },\n    OBSERVE_QUERY: { operationPrefix: 'observeQuery', usePlural: false },\n};\nconst SELECTION_SET_WILDCARD = '*';\nfunction defaultSelectionSetForNonModel(nonModelDefinition) {\n    // fields that are explicitly part of the graphql schema;\n    const { fields } = nonModelDefinition;\n    const explicitFields = Object.values(fields)\n        // Default selection set omits non-model fields\n        .map(({ type, name }) => (typeof type === 'string' ||\n        (typeof type === 'object' && typeof type?.enum === 'string')) &&\n        name)\n        .filter(Boolean);\n    // fields used for owner auth rules that may or may not also\n    // be explicit on the model.\n    return Array.from(new Set(explicitFields));\n}\nfunction defaultSelectionSetForModel(modelDefinition) {\n    // fields that are explicitly part of the graphql schema; not\n    // inferred from owner auth rules.\n    const { fields } = modelDefinition;\n    const explicitFields = Object.values(fields)\n        // Default selection set omits model fields\n        .map(({ type, name }) => {\n        if (typeof type === 'string')\n            return name;\n        if (typeof type === 'object') {\n            if (typeof type?.enum === 'string') {\n                return name;\n            }\n            else if (typeof type?.nonModel === 'string') {\n                return `${name}.${SELECTION_SET_WILDCARD}`;\n            }\n        }\n    })\n        .filter(Boolean);\n    // fields used for owner auth rules that may or may not also\n    // be explicit on the model.\n    const ownerFields = resolveOwnerFields(modelDefinition);\n    return Array.from(new Set(explicitFields.concat(ownerFields)));\n}\nconst FIELD_IR = '';\n/**\n * Generates nested Custom Selection Set IR from path\n *\n * @param modelDefinitions\n * @param modelName\n * @param selectionSet - array of object paths\n * @example\n * ### Given\n * `selectionSet = ['id', 'comments.post.id']`\n * ### Returns\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n */\nexport function customSelectionSetToIR(modelInstrospection, modelName, selectionSet) {\n    const dotNotationToObject = (path, modelOrNonModelName) => {\n        const [fieldName, ...rest] = path.split('.');\n        const nested = rest[0];\n        const modelDefinition = modelInstrospection.models[modelOrNonModelName];\n        const modelFields = modelDefinition?.fields;\n        const relatedModel = modelFields?.[fieldName]?.type\n            ?.model;\n        const relatedModelDefinition = modelInstrospection.models[relatedModel];\n        const relatedNonModel = modelFields?.[fieldName]?.type?.nonModel;\n        const relatedNonModelDefinition = modelInstrospection.nonModels[relatedNonModel];\n        const isModelOrNonModelOrField = relatedModelDefinition\n            ? 'model'\n            : relatedNonModelDefinition\n                ? 'nonModel'\n                : 'field';\n        if (isModelOrNonModelOrField === 'nonModel') {\n            let result = {};\n            if (!nested) {\n                throw Error(`${fieldName} must declare a wildcard (*) or a field of custom type ${relatedNonModel}`);\n            }\n            if (nested === SELECTION_SET_WILDCARD) {\n                result = {\n                    [fieldName]: nonModelsDefaultSelectionSetIR(relatedNonModelDefinition),\n                };\n            }\n            else {\n                result = {\n                    [fieldName]: dotNotationToObject(rest.join('.'), relatedNonModel),\n                };\n            }\n            return result;\n        }\n        else if (isModelOrNonModelOrField === 'model') {\n            let result = {};\n            if (!nested) {\n                throw Error(`${fieldName} must declare a wildcard (*) or a field of model ${relatedModel}`);\n            }\n            if (nested === SELECTION_SET_WILDCARD) {\n                const relatedModelDefinition = modelInstrospection.models[relatedModel];\n                result = {\n                    [fieldName]: modelsDefaultSelectionSetIR(relatedModelDefinition),\n                };\n            }\n            else {\n                result = {\n                    [fieldName]: dotNotationToObject(rest.join('.'), relatedModel),\n                };\n            }\n            if (modelFields[fieldName]?.isArray) {\n                result = {\n                    [fieldName]: {\n                        items: result[fieldName],\n                    },\n                };\n            }\n            return result;\n        }\n        else {\n            const modelField = modelFields?.[fieldName];\n            const nonModelDefinition = modelInstrospection.nonModels[modelOrNonModelName];\n            const nonModelField = nonModelDefinition?.fields?.[fieldName];\n            if (!nonModelDefinition) {\n                const isOwnerField = resolveOwnerFields(modelDefinition).includes(fieldName);\n                if (!modelField && !isOwnerField) {\n                    throw Error(`${fieldName} is not a field of model ${modelOrNonModelName}`);\n                }\n            }\n            else {\n                if (!nonModelField) {\n                    throw Error(`${fieldName} is not a field of custom type ${modelOrNonModelName}`);\n                }\n            }\n            return { [fieldName]: FIELD_IR };\n        }\n    };\n    return selectionSet.reduce((resultObj, path) => deepMergeSelectionSetObjects(dotNotationToObject(path, modelName), resultObj), {});\n}\nconst modelsDefaultSelectionSetIR = (relatedModelDefinition) => {\n    const defaultSelectionSet = defaultSelectionSetForModel(relatedModelDefinition);\n    const reduced = defaultSelectionSet.reduce((acc, curVal) => {\n        acc[curVal] = FIELD_IR;\n        return acc;\n    }, {});\n    return reduced;\n};\nconst nonModelsDefaultSelectionSetIR = (relatedNonModelDefinition) => {\n    const defaultSelectionSet = defaultSelectionSetForNonModel(relatedNonModelDefinition);\n    const reduced = defaultSelectionSet.reduce((acc, curVal) => {\n        acc[curVal] = FIELD_IR;\n        return acc;\n    }, {});\n    return reduced;\n};\n/**\n * Stringifies selection set IR\n * * @example\n * ### Given\n * ```ts\n * {\n *   id: '',\n *   comments: {\n *     items: { post: { id: '' } }\n *   }\n * }\n * ```\n * ### Returns\n * `'id comments { items { post { id } } }'`\n */\nexport function selectionSetIRToString(obj) {\n    const res = [];\n    Object.entries(obj).forEach(([fieldName, value]) => {\n        if (value === FIELD_IR) {\n            res.push(fieldName);\n        }\n        else if (typeof value === 'object' && value !== null) {\n            if (value?.items) {\n                res.push(fieldName, '{', 'items', '{', selectionSetIRToString(value.items), '}', '}');\n            }\n            else {\n                res.push(fieldName, '{', selectionSetIRToString(value), '}');\n            }\n        }\n    });\n    return res.join(' ');\n}\n/**\n * Recursively merges selection set objects from `source` onto `target`.\n *\n * `target` will be updated. `source` will be left alone.\n *\n * @param source The object to merge into target.\n * @param target The object to be mutated.\n */\nfunction deepMergeSelectionSetObjects(source, target) {\n    const isObject = (obj) => obj && typeof obj === 'object';\n    for (const key in source) {\n        // This verification avoids 'Prototype Pollution' issue\n        if (!source.hasOwnProperty(key))\n            continue;\n        if (target.hasOwnProperty(key) && isObject(target[key])) {\n            deepMergeSelectionSetObjects(source[key], target[key]);\n        }\n        else {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nexport function generateSelectionSet(modelInstrospection, modelName, selectionSet) {\n    const modelDefinition = modelInstrospection.models[modelName];\n    const selSetIr = customSelectionSetToIR(modelInstrospection, modelName, selectionSet ?? defaultSelectionSetForModel(modelDefinition));\n    const selSetString = selectionSetIRToString(selSetIr);\n    return selSetString;\n}\nexport function generateGraphQLDocument(modelInstrospection, modelName, modelOperation, listArgs, indexMeta) {\n    const modelDefinition = modelInstrospection.models[modelName];\n    const { name, pluralName, fields, primaryKeyInfo: { isCustomPrimaryKey, primaryKeyFieldName, sortKeyFieldNames, }, } = modelDefinition;\n    const { operationPrefix, usePlural } = graphQLOperationsInfo[modelOperation];\n    const { selectionSet } = listArgs || {};\n    let graphQLFieldName;\n    let indexQueryArgs;\n    if (operationPrefix) {\n        graphQLFieldName = `${operationPrefix}${usePlural ? pluralName : name}`;\n    }\n    else if (indexMeta) {\n        const { queryField, pk, sk = [] } = indexMeta;\n        graphQLFieldName = queryField;\n        const skQueryArgs = sk.reduce((acc, fieldName) => {\n            const fieldType = fields[fieldName].type;\n            acc[fieldName] = `Model${fieldType}KeyConditionInput`;\n            return acc;\n        }, {});\n        indexQueryArgs = {\n            [pk]: `${fields[pk].type}!`,\n            ...skQueryArgs,\n        };\n    }\n    else {\n        throw new Error('Error generating GraphQL Document - invalid operation name');\n    }\n    let graphQLOperationType;\n    let graphQLSelectionSet;\n    let graphQLArguments;\n    const selectionSetFields = generateSelectionSet(modelInstrospection, modelName, selectionSet);\n    switch (modelOperation) {\n        case 'CREATE':\n        case 'UPDATE':\n        case 'DELETE':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    input: `${operationPrefix.charAt(0).toLocaleUpperCase() +\n                        operationPrefix.slice(1)}${name}Input!`,\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'mutation');\n        case 'READ':\n            graphQLArguments ??\n                (graphQLArguments = isCustomPrimaryKey\n                    ? [primaryKeyFieldName, ...sortKeyFieldNames].reduce((acc, fieldName) => {\n                        acc[fieldName] = `${fields[fieldName].type}!`;\n                        return acc;\n                    }, {})\n                    : {\n                        [primaryKeyFieldName]: `${fields[primaryKeyFieldName].type}!`,\n                    });\n            graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n        case 'LIST':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    filter: `Model${name}FilterInput`,\n                    limit: 'Int',\n                    nextToken: 'String',\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'query');\n            graphQLSelectionSet ??\n                (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n        case 'INDEX_QUERY':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    ...indexQueryArgs,\n                    filter: `Model${name}FilterInput`,\n                    limit: 'Int',\n                    nextToken: 'String',\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'query');\n            graphQLSelectionSet ??\n                (graphQLSelectionSet = `items { ${selectionSetFields} } nextToken __typename`);\n        case 'ONCREATE':\n        case 'ONUPDATE':\n        case 'ONDELETE':\n            graphQLArguments ??\n                (graphQLArguments = {\n                    filter: `ModelSubscription${name}FilterInput`,\n                });\n            graphQLOperationType ?? (graphQLOperationType = 'subscription');\n            graphQLSelectionSet ?? (graphQLSelectionSet = selectionSetFields);\n            break;\n        case 'OBSERVE_QUERY':\n        default:\n            throw new Error('Internal error: Attempted to generate graphql document for observeQuery. Please report this error.');\n    }\n    const graphQLDocument = `${graphQLOperationType}${graphQLArguments\n        ? `(${Object.entries(graphQLArguments).map(([fieldName, type]) => `\\$${fieldName}: ${type}`)})`\n        : ''} { ${graphQLFieldName}${graphQLArguments\n        ? `(${Object.keys(graphQLArguments).map(fieldName => `${fieldName}: \\$${fieldName}`)})`\n        : ''} { ${graphQLSelectionSet} } }`;\n    return graphQLDocument;\n}\nexport function buildGraphQLVariables(modelDefinition, operation, arg, modelIntrospection, indexMeta) {\n    const { fields, primaryKeyInfo: { isCustomPrimaryKey, primaryKeyFieldName, sortKeyFieldNames, }, } = modelDefinition;\n    let variables = {};\n    // TODO: process input\n    switch (operation) {\n        case 'CREATE':\n            variables = {\n                input: arg\n                    ? normalizeMutationInput(arg, modelDefinition, modelIntrospection)\n                    : {},\n            };\n            break;\n        case 'UPDATE':\n            // readonly fields are not  updated\n            variables = {\n                input: arg\n                    ? Object.fromEntries(Object.entries(normalizeMutationInput(arg, modelDefinition, modelIntrospection)).filter(([fieldName]) => {\n                        const { isReadOnly } = fields[fieldName];\n                        return !isReadOnly;\n                    }))\n                    : {},\n            };\n            break;\n        case 'READ':\n        case 'DELETE':\n            // only identifiers are sent\n            if (arg) {\n                variables = isCustomPrimaryKey\n                    ? [primaryKeyFieldName, ...sortKeyFieldNames].reduce((acc, fieldName) => {\n                        acc[fieldName] = arg[fieldName];\n                        return acc;\n                    }, {})\n                    : { [primaryKeyFieldName]: arg[primaryKeyFieldName] };\n            }\n            if (operation === 'DELETE') {\n                variables = { input: variables };\n            }\n            break;\n        case 'LIST':\n            if (arg?.filter) {\n                variables.filter = arg.filter;\n            }\n            if (arg?.nextToken) {\n                variables.nextToken = arg.nextToken;\n            }\n            if (arg?.limit) {\n                variables.limit = arg.limit;\n            }\n            break;\n        case 'INDEX_QUERY':\n            const { pk, sk = [] } = indexMeta;\n            variables[pk] = arg[pk];\n            for (const skField of sk) {\n                variables[skField] = arg[skField];\n            }\n            if (arg?.filter) {\n                variables.filter = arg.filter;\n            }\n            if (arg?.nextToken) {\n                variables.nextToken = arg.nextToken;\n            }\n            if (arg?.limit) {\n                variables.limit = arg.limit;\n            }\n            break;\n        case 'ONCREATE':\n        case 'ONUPDATE':\n        case 'ONDELETE':\n            if (arg?.filter) {\n                variables = { filter: arg.filter };\n            }\n            break;\n        case 'OBSERVE_QUERY':\n            throw new Error('Internal error: Attempted to build variables for observeQuery. Please report this error.');\n            break;\n        default:\n            const exhaustiveCheck = operation;\n            throw new Error(`Unhandled operation case: ${exhaustiveCheck}`);\n    }\n    return variables;\n}\n/**\n * Iterates over mutation input values and resolves any model inputs to their corresponding join fields/values\n *\n * @example\n * ### Usage\n * ```ts\n * const result = normalizeMutationInput({ post: post }, model, modelDefinition);\n * ```\n * ### Result\n * ```ts\n * { postId: \"abc123\" }\n * ```\n *\n */\nexport function normalizeMutationInput(mutationInput, model, modelIntrospection) {\n    const { fields } = model;\n    const normalized = {};\n    Object.entries(mutationInput).forEach(([inputFieldName, inputValue]) => {\n        const fieldType = fields[inputFieldName]?.type;\n        const relatedModelName = fieldType?.model;\n        if (relatedModelName) {\n            const association = fields[inputFieldName]?.association;\n            const relatedModelDef = modelIntrospection.models[relatedModelName];\n            const relatedModelPkInfo = relatedModelDef.primaryKeyInfo;\n            if (association?.connectionType === connectionType.HAS_ONE) {\n                const associationHasOne = association;\n                associationHasOne.targetNames.forEach((targetName, idx) => {\n                    const associatedFieldName = associationHasOne.associatedWith[idx];\n                    normalized[targetName] = inputValue[associatedFieldName];\n                });\n            }\n            if (association?.connectionType === connectionType.BELONGS_TO) {\n                const associationBelongsTo = association;\n                associationBelongsTo.targetNames.forEach((targetName, idx) => {\n                    if (idx === 0) {\n                        const associatedFieldName = relatedModelPkInfo.primaryKeyFieldName;\n                        normalized[targetName] = inputValue[associatedFieldName];\n                    }\n                    else {\n                        const associatedFieldName = relatedModelPkInfo.sortKeyFieldNames[idx - 1];\n                        normalized[targetName] = inputValue[associatedFieldName];\n                    }\n                });\n            }\n        }\n        else {\n            normalized[inputFieldName] = inputValue;\n        }\n    });\n    return normalized;\n}\n/**\n * Produces a parameter object that can contains auth mode/token overrides\n * only if present in either `options` (first) or configured on the `client`\n * as a fallback.\n *\n * @param client Configured client from `generateClient`\n * @param options Args/Options obect from call site.\n * @returns\n */\nexport function authModeParams(client, options = {}) {\n    return {\n        authMode: options.authMode || client[__authMode],\n        authToken: options.authToken || client[__authToken],\n    };\n}\n/**\n * Retrieves custom headers from either the client or request options.\n * @param {client} V6Client | V6ClientSSRRequest | V6ClientSSRCookies - for extracting client headers\n * @param {requestHeaders} [CustomHeaders] - request headers\n * @returns {CustomHeaders} - custom headers\n */\nexport function getCustomHeaders(client, requestHeaders) {\n    let headers = client[__headers] || {};\n    // Individual request headers will take precedence over client headers.\n    // We intentionally do *not* merge client and request headers.\n    if (requestHeaders) {\n        headers = requestHeaders;\n    }\n    return headers;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}